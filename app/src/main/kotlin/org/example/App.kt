/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import com.amazonaws.services.lambda.runtime.Context
import com.amazonaws.services.lambda.runtime.RequestHandler
import kotlinx.coroutines.runBlocking
import org.example.dto.HandlerInput
import org.example.dto.HandlerOutput
import org.example.github.GitHubApiClient
import org.example.github.OkHttpGitHubApiClient
import org.example.messenger.Messenger
import org.example.messenger.TelegramMessenger
import org.example.support.logger.LambdaLoggerAdapter
import org.example.support.logger.Logger

class RequiredEnvVarNotSetException(
    envVarName: String,
) : IllegalArgumentException("'$envVarName' is not set")

class App(
    private val messenger: Messenger =
        TelegramMessenger(
            botToken = System.getenv("TELEGRAM_BOT_TOKEN") ?: throw RequiredEnvVarNotSetException("TELEGRAM_BOT_TOKEN"),
            botUsername = System.getenv("TELEGRAM_BOT_USERNAME") ?: throw RequiredEnvVarNotSetException("TELEGRAM_BOT_USERNAME"),
            chatId = System.getenv("TELEGRAM_CHAT_ID") ?: throw RequiredEnvVarNotSetException("TELEGRAM_CHAT_ID"),
        ),
    private val gitHubApiClient: GitHubApiClient =
        OkHttpGitHubApiClient(
            username = System.getenv("GITHUB_USERNAME") ?: throw RequiredEnvVarNotSetException("GITHUB_USERNAME"),
            token = System.getenv("GITHUB_TOKEN") ?: throw RequiredEnvVarNotSetException("GITHUB_TOKEN"),
        ),
) : RequestHandler<HandlerInput, HandlerOutput> {
    /**
     * Lambda 호출 시 이 메서드가 실행된다.
     */
    override fun handleRequest(
        input: HandlerInput,
        context: Context,
    ): HandlerOutput {
        validateSeoulTimezone()

        // setup logger
        val lambdaLogger = context.logger
        val lambdaLoggerAdapter = LambdaLoggerAdapter(lambdaLogger)

        // get today GitHub Contributes
        val todayGitHubContributes =
            try {
                runBlocking {
                    gitHubApiClient.getTodayContributes(logger = lambdaLoggerAdapter)
                }
            } catch (e: Exception) {
                return handleGitHubContributesError(e, lambdaLoggerAdapter)
            }

        // send message
        messenger.sendGitHubContributesMessage(contributes = todayGitHubContributes, logger = lambdaLoggerAdapter)

        return HandlerOutput(message = "success.", contributes = todayGitHubContributes)
    }

    private fun handleGitHubContributesError(
        e: Exception,
        logger: Logger,
    ): HandlerOutput {
        messenger.sendErrorMessage(error = e, logger = logger)

        return HandlerOutput(message = "failed.", errorMessage = e.message)
    }

    private fun validateSeoulTimezone() {
        requireNotNull(System.getenv("TZ"))

        when (System.getenv("TZ")) {
            "Asia/Seoul" -> return
            else -> throw IllegalArgumentException("Timezone is not null, but not set to 'Asia/Seoul'")
        }
    }
}

fun main() {
    val app = App()

    app.handleRequest(
        input = HandlerInput("hi"),
        context = ConsoleLoggerLambdaContext(),
    )
}
