/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import com.amazonaws.services.lambda.runtime.Context
import com.amazonaws.services.lambda.runtime.RequestHandler
import org.example.dto.HandlerInput
import org.example.dto.HandlerOutput
import org.example.github.GitHubApiClient
import org.example.github.OkHttpGitHubApiClient
import org.example.messenger.Messenger
import org.example.messenger.TelegramMessenger
import org.example.support.logger.LambdaLoggerAdapter

class RequiredEnvVarNotSetException(envVarName: String) : IllegalArgumentException("'$envVarName' is not set")

class App(
    private val messenger: Messenger =
        TelegramMessenger(
            botToken = System.getenv("TELEGRAM_BOT_TOKEN") ?: throw RequiredEnvVarNotSetException("TELEGRAM_BOT_TOKEN"),
            botUsername = System.getenv("TELEGRAM_BOT_USERNAME") ?: throw RequiredEnvVarNotSetException("TELEGRAM_BOT_USERNAME"),
            chatId = System.getenv("TELEGRAM_CHAT_ID") ?: throw RequiredEnvVarNotSetException("TELEGRAM_CHAT_ID"),
        ),
    private val gitHubApiClient: GitHubApiClient =
        OkHttpGitHubApiClient(
            username = System.getenv("GITHUB_USERNAME") ?: throw RequiredEnvVarNotSetException("GITHUB_USERNAME"),
            token = System.getenv("GITHUB_TOKEN") ?: throw RequiredEnvVarNotSetException("GITHUB_TOKEN"),
        ),
) : RequestHandler<HandlerInput, HandlerOutput> {
    /**
     * Lambda 호출 시 이 메서드가 실행된다.
     */
    override fun handleRequest(
        input: HandlerInput,
        context: Context,
    ): HandlerOutput {
        validateSeoulTimezone()

        val lambdaLogger = context.logger
        val lambdaLoggerAdapter = LambdaLoggerAdapter(lambdaLogger)

        val todayCommitCount =
            try {
                gitHubApiClient.getTodayCommitCount(logger = lambdaLoggerAdapter)
            } catch (e: Exception) {
                messenger.sendMessage(
                    text = "Failed to get today's commit count. Error Message: ${e.message}",
                    logger = lambdaLoggerAdapter,
                )

                return HandlerOutput(
                    message = "failed.",
                    errorMessage = e.message,
                )
            }
        messenger.sendMessage(text = todayCommitCount.toString(), logger = lambdaLoggerAdapter)

        return HandlerOutput(
            message = "success.",
            todayCommitCount = todayCommitCount,
        )
    }

    private fun validateSeoulTimezone() {
        when (System.getenv("TZ")) {
            "Asia/Seoul" -> return
            else -> throw IllegalArgumentException("Timezone must be set to 'Asia/Seoul'")
        }
    }
}

fun main() {
    val app = App()

    app.handleRequest(
        input = HandlerInput("hi"),
        context = ConsoleLoggerLambdaContext(),
    )
}
